##====================================================================
##
##--------------------------------------------------------------------
##
##====================================================================


##====================================================================
##  本体処理
##====================================================================

##--------------------------------------------------------------------
##  対話入力
##--------------------------------------------------------------------

{
    ##----  引数の入力
    num = $1;    # 対象数
    max = $2;    # 上限数
    len = $3;    # 収容数
    ##----  計算と出力
    print ""
    enum_parti(num, max, len);
    print ""
}


##====================================================================
##  関数定義
##====================================================================

##--------------------------------------------------------------------
##  分割数の列挙
##--------------------------------------------------------------------

function enum_parti(num, pos, len,    sum, ct, seq, k) {
    s = 0;    # 事象の個数
    ##----  適合する事象列を出力
    if ( sum > num ) { return 0; }                            # 総和のオーバー
    if ( sum == num ) { seq_output(seq, ct); return 1; }      # 事象列の出力
    if ( ct == len ) { return 0; }                            # 列長による制限
    ##----  自明な再帰の回避による効率化
    if ( pos == 1 && num-sum < len-ct ) {                     # 1のみによる分割
        for ( k = 0; k < num-sum; k++ ) { seq[ct+k] = 1; }    # 配列の残りをnum-sum個の1で埋める
        ct += k; seq_output(seq, ct); return 1;               # 事象列の出力
    }
    ##----  下位節の分岐
    for ( k = pos; k >= 1; k-- ) {                        # 大きい事象値から走査
        ##----  再帰呼出の事前処理
        seq[ct++] = k;                                    # 事象列を1つ伸ばす(下位節に下る)
        sum += k;                                         # 局面の評価値の更新
        ##----  再帰呼出
        # kをk-1に変更すると、異なる正整数による分割となる
        s += enum_parti(num, k, len, sum, ct, seq);
        ##----  再帰呼出の事後処理
        ct--;                                             # 事象列を1つ縮める(下位節から戻る)
        sum -= k;                                         # 局面の評価値の元戻
    }
    return s;                                             # 事象の個数の返却
}

##--------------------------------------------------------------------
##  試行列の出力
##--------------------------------------------------------------------

function seq_output(arr, n) {
    for ( k = 0; k < n; k++ )  printf("%3d", arr[k]);
    print ""
}
