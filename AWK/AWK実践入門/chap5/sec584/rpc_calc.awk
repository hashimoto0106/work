##=================================================================
## スタック式計算機
## rpn_calc.awk
##-----------------------------------------------------------------
##
##
##=================================================================

##=================================================================
## 主処理
##=================================================================

BEGIN {
    # スタック長
    NUM = 5

    # booleanの定義
    TRUE = 1
    FALSE = 0

    Num = 0 # スタックに保持している個数

    print "type \"q\" to exit this program"
    print "type \"p\" to print stack"
    printf ">" # プロンプトの表示
}

$0 ~ /[0-9]+/ {
    push(stack, $1)
    stack_output()
}

$0 ~ /[+-/*^]/  {
    calc(get_ope($0), stack)
    stack_output()
}

$0 ~ /q/ {
    print "quit"
    exit
}

$0 ~ /p/ {
    stack_output()
}

{
    printf ">" # プロンプトの表示
}

END {
}

##=================================================================
## 関数定義
##=================================================================

##-----------------------------------------------------------------
## スタックの出力
##-----------------------------------------------------------------

function stack_output() {
    for ( i = 0; i < Num; i++ ) {
        print i+1 "| " stack[i]
    }
    print "-------"
}

##-----------------------------------------------------------------
## スタックへのプッシュ
##-----------------------------------------------------------------

function push(stack, input) {
    if ( ! is_full(stack) ) {
        print "full!"
        exit
    }
    stack[Num] = input
    Num++
}

##-----------------------------------------------------------------
## スタックからのポップ
##-----------------------------------------------------------------

function pop(stack) {
    if ( ! is_emp(stack) ) {
        print "Stack is empty"
        exit
    }
    Num--
    return stack[Num]
}


##-----------------------------------------------------------------
## スタックの空判定
##-----------------------------------------------------------------

function is_emp(stack) {
    if ( Num == 0 ) {
        return FALSE
    }
    return TRUE
}

##-----------------------------------------------------------------
## スタックの満判定
##-----------------------------------------------------------------

function is_full(stack) {
    count = 0
    for ( i in stack ) {
        count++
    }

    if ( count >= NUM ) {
        return FALSE
    }
    return TRUE
}

##-----------------------------------------------------------------
## 演算子の判定
##-----------------------------------------------------------------

function get_ope(char) {
    if ( match(char, /+/)) {
        return -1
    }
    if ( match(char, /-/)) {
        return -2
    }
    if ( match(char, /*/)) {
        return -3
    }
    if ( match(char, /\//)) {
        return -4
    }
    if ( match(char, /\^/)) {
        return -5
    }
}

##-----------------------------------------------------------------
## 演算子による計算
##-----------------------------------------------------------------

function calc(ope, stack) {
    n2 = pop(stack)
    n1 = pop(stack)

    switch (ope) {
    case -1:
        push(stack, n1+n2)
        break
    case -2:
        push(stack, n1-n2)
        break
    case -3:
        push(stack, n1*n2)
        break
    case -4:
        push(stack, n1/n2)
        break
    case -5:
        push(stack, n1^n2)
        break
    default:
        print "ERR!"
        exit
    }
}
