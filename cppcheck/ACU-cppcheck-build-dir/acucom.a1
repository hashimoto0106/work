<?xml version="1.0"?>
<analyzerinfo checksum="2019140613">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12404841173001334726">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" line="38" column="8"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ul_data&apos; can be reduced." verbose="The scope of the variable &apos;ul_data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5130791628541286969">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" line="735" column="10"/>
            <symbol>ul_data</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sign_bit&apos; can be reduced." verbose="The scope of the variable &apos;sign_bit&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11370410434320636880">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" line="737" column="10"/>
            <symbol>sign_bit</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sign_data&apos; can be reduced." verbose="The scope of the variable &apos;sign_data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8597700473912663538">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" line="738" column="10"/>
            <symbol>sign_data</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11243020601379554453">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" line="795" column="8"/>
            <symbol>tmp</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;bin[i]&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;bin[i]&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" hash="6886994948555474380">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" line="278" column="15" info="Unsigned positive"/>
            <symbol>bin[i]</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;bcd[i]&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;bcd[i]&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" hash="3621030387590345882">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" line="307" column="15" info="Unsigned positive"/>
            <symbol>bcd[i]</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;*da_bidata&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;*da_bidata&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" hash="7055169088528852857">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\acucom.c" line="348" column="19" info="Unsigned positive"/>
            <symbol>*da_bidata</symbol>
        </error>
  <FileInfo check="ctu">
<function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:68:5" call-funcname="c_isbin" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="339" col="8" my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:81:5" my-argnr="1"/>
<function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:68:5" call-funcname="c_isbin" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="537" col="8" my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:120:5" my-argnr="1"/>
<function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:68:5" call-funcname="c_isbin" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="590" col="8" my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:131:5" my-argnr="1"/>
<function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:68:5" call-funcname="c_isbin" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="801" col="8" my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:174:5" my-argnr="1"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <array-index>
    <unsafe-usage my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:141:5" my-argnr="1" my-argname="data" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="645" col="6" value="0"/>
    </array-index>
  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:30:6" my-argnr="1" my-argname="bit_trns_cnv" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="40" col="18" value="0"/>
    <unsafe-usage my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:90:8" my-argnr="4" my-argname="ans" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="383" col="3" value="0"/>
    <unsafe-usage my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:141:5" my-argnr="1" my-argname="data" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="645" col="6" value="0"/>
    <unsafe-usage my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:141:5" my-argnr="2" my-argname="ddata" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="650" col="3" value="0"/>
    <unsafe-usage my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:207:5" my-argnr="2" my-argname="rx_data_buf" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="1034" col="3" value="0"/>
    <unsafe-usage my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:217:5" my-argnr="2" my-argname="rx_data_buf" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="1072" col="3" value="0"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/acucom.h:141:5" my-argnr="1" my-argname="data" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/COMFUNC/acucom.c" line="645" col="6" value="0"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="c_trns_bit" lineNumber="34"/>
    <functiondecl functionName="cLimitter" lineNumber="84"/>
    <functiondecl functionName="compress32" lineNumber="114"/>
    <functiondecl functionName="expand32" lineNumber="145"/>
    <functiondecl functionName="compress32_ex" lineNumber="173"/>
    <functiondecl functionName="expand32_ex" lineNumber="207"/>
    <functiondecl functionName="chkAscii" lineNumber="234"/>
    <functiondecl functionName="c_isbin" lineNumber="269"/>
    <functiondecl functionName="c_isbcd" lineNumber="298"/>
    <functiondecl functionName="c_binToAscii" lineNumber="330"/>
    <functiondecl functionName="c_asciiToBin" lineNumber="373"/>
    <functiondecl functionName="c_doubleToBCD" lineNumber="420"/>
    <functiondecl functionName="c_longToBCD" lineNumber="480"/>
    <functiondecl functionName="c_bcdToLong" lineNumber="524"/>
    <functiondecl functionName="c_bcdToDouble" lineNumber="577"/>
    <functiondecl functionName="c_binToDouble" lineNumber="629"/>
    <functiondecl functionName="c_longTobin" lineNumber="664"/>
    <functiondecl functionName="c_doubleTobin" lineNumber="691"/>
    <functiondecl functionName="c_binToLong" lineNumber="727"/>
    <functiondecl functionName="c_packToUnpack" lineNumber="789"/>
    <functiondecl functionName="c_unpackTopack" lineNumber="843"/>
    <functiondecl functionName="c_tx_binData_ang" lineNumber="878"/>
    <functiondecl functionName="c_tx_binData_vol" lineNumber="947"/>
    <functiondecl functionName="c_rx_binData_ang" lineNumber="998"/>
    <functiondecl functionName="c_rx_binData_vol" lineNumber="1050"/>
    <functioncall functionName="bcd_data"/>
    <functioncall functionName="c_isbin"/>
    <functioncall functionName="char"/>
    <functioncall functionName="chkAscii"/>
    <functioncall functionName="cnt"/>
    <functioncall functionName="d_bit"/>
    <functioncall functionName="da_asdata"/>
    <functioncall functionName="da_bidata"/>
    <functioncall functionName="da_length"/>
    <functioncall functionName="double"/>
    <functioncall functionName="fabs"/>
    <functioncall functionName="flcol"/>
    <functioncall functionName="for"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="input"/>
    <functioncall functionName="int"/>
    <functioncall functionName="integer"/>
    <functioncall functionName="l_data"/>
    <functioncall functionName="l_mask"/>
    <functioncall functionName="length"/>
    <functioncall functionName="limit_value"/>
    <functioncall functionName="long"/>
    <functioncall functionName="lsb"/>
    <functioncall functionName="pack_cnt"/>
    <functioncall functionName="pow"/>
    <functioncall functionName="return"/>
    <functioncall functionName="s_bit"/>
    <functioncall functionName="set"/>
    <functioncall functionName="sign"/>
    <functioncall functionName="sign_bit"/>
    <functioncall functionName="sign_data"/>
    <functioncall functionName="sign_mask"/>
    <functioncall functionName="src_adr"/>
    <functioncall functionName="tmp"/>
    <functioncall functionName="tx_data_trns_buf"/>
    <functioncall functionName="ul_data"/>
    <functioncall functionName="unpack"/>
    <functioncall functionName="unpack_cnt"/>
    <functioncall functionName="while"/>
    <functioncall functionName="work"/>
  </FileInfo>
</analyzerinfo>
