<?xml version="1.0"?>
<analyzerinfo checksum="625762839">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x_rad&apos; can be reduced." verbose="The scope of the variable &apos;x_rad&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5234506126008489597">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\anglecom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\anglecom.c" line="33" column="9"/>
            <symbol>x_rad</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y_rad&apos; can be reduced." verbose="The scope of the variable &apos;y_rad&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="601081384965170035">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\anglecom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\anglecom.c" line="34" column="9"/>
            <symbol>y_rad</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;az_rad&apos; can be reduced." verbose="The scope of the variable &apos;az_rad&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6569307953751892240">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\anglecom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\anglecom.c" line="144" column="9"/>
            <symbol>az_rad</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;el_rad&apos; can be reduced." verbose="The scope of the variable &apos;el_rad&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8278756366179219669">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\anglecom.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\COMFUNC\anglecom.c" line="145" column="9"/>
            <symbol>el_rad</symbol>
        </error>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="c_xy_az" lineNumber="28"/>
    <functiondecl functionName="c_xy_el" lineNumber="95"/>
    <functiondecl functionName="c_azel_x" lineNumber="139"/>
    <functiondecl functionName="c_azel_y" lineNumber="187"/>
    <functiondecl functionName="c_sec_param" lineNumber="216"/>
    <functiondecl functionName="c_azel_az" lineNumber="242"/>
    <functiondecl functionName="c_azel_el" lineNumber="284"/>
    <functiondecl functionName="c_azelcr_az" lineNumber="316"/>
    <functiondecl functionName="c_azelcr_el" lineNumber="369"/>
    <functiondecl functionName="c_azelcr_az_singlpoint" lineNumber="416"/>
    <functiondecl functionName="c_azelcr_az_normal" lineNumber="450"/>
    <functioncall functionName="acos"/>
    <functioncall functionName="ans"/>
    <functioncall functionName="asin"/>
    <functioncall functionName="atan2"/>
    <functioncall functionName="ax1_deg"/>
    <functioncall functionName="ax2_deg"/>
    <functioncall functionName="ax2_deg_jdg"/>
    <functioncall functionName="ax2_rad"/>
    <functioncall functionName="ax3_deg"/>
    <functioncall functionName="ax3_deg_jdg"/>
    <functioncall functionName="ax3_rad"/>
    <functioncall functionName="az_adjst_deg"/>
    <functioncall functionName="az_deg"/>
    <functioncall functionName="az_deg_jdg"/>
    <functioncall functionName="az_rad"/>
    <functioncall functionName="c_azelcr_az_normal"/>
    <functioncall functionName="c_azelcr_az_singlpoint"/>
    <functioncall functionName="cos"/>
    <functioncall functionName="cosxcosy"/>
    <functioncall functionName="el_deg"/>
    <functioncall functionName="el_rad"/>
    <functioncall functionName="fabs"/>
    <functioncall functionName="if"/>
    <functioncall functionName="limit"/>
    <functioncall functionName="return"/>
    <functioncall functionName="sin"/>
    <functioncall functionName="sqrt"/>
    <functioncall functionName="tan"/>
    <functioncall functionName="x_deg"/>
    <functioncall functionName="x_rad"/>
    <functioncall functionName="y_deg"/>
    <functioncall functionName="y_rad"/>
  </FileInfo>
</analyzerinfo>
