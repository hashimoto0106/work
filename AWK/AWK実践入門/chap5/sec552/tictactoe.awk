##====================================================================
##  三目並べ
##  ticktackto.c
##====================================================================


##====================================================================
##  事前処理
##====================================================================

BEGIN {
    ##----  定数
    SZ = 3    # 盤面のサイズ
    EV = 0    #       引分
    BK = 1    # 黒駒  黒勝
    WH = 2    # 白駒  白勝
    NL = 3    # 空枡  継続
    split("● ○ ・", stn);    # 黒駒と白駒
    ##----  盤面の初期化
    for ( k1 = 0; k1 < SZ; k1++ ) {
        for ( k2 = 0; k2 < SZ; k2++ ) {
            brd[k1][k2] = stn[NL];    # 空枡で初期化
        }
    }
    ##----  盤面の表示
    print "ゲーム開始";
    board_display();
    ##----  手数と手番の表示
    ct = 1; who = BK;
    printf "第" ct "手 " stn[who] "番 ??  ";
}


##====================================================================
##  本体処理
##====================================================================

{
    ##----  打手の位置の入力
    x = $1; x--;
    y = $2; y--;
    ##----  盤外手による中止確認
    if ( x < 0 || y < 0 ) {
        print "中止 !!"; exit;   # 中止メッセージ
    }
    ##----  打手処理
    if ( ! input_check(x, y, who) ) {
        print "無効 ??  "; next;   # 無効メッセージ
    }
    ##----  盤面の表示
    board_display();
    ##----  終了判定
    game = game_over(who, ct);
    if ( game == BK ) { print "!! 黒勝"; exit; }
    if ( game == WH ) { print "!! 白勝"; exit; }
    if ( game == EV ) { print "!! 引分"; exit; }
    ##----  手数と手番の表示
    if ( who == BK ) { who = WH; } else { who = BK; }
    printf "第" ++ct "手 " stn[who] "番 ??  ";
}


##====================================================================
##  関数定義
##====================================================================

##--------------------------------------------------------------------
##  盤面表示
##--------------------------------------------------------------------

function board_display(  k1, k2, val) {
    for ( k1 = 0; k1 < SZ; k1++ ) {
        for ( k2 = 0; k2 < SZ; k2++ ) {
            printf brd[k1][k2];
        }
        print "";
    }
}

##--------------------------------------------------------------------
##  打手処理
##--------------------------------------------------------------------

function input_check(x, y, who) {
    if ( x >= SZ || y >= SZ ) { return 0; }      # 盤外手
    if ( brd[x][y] != stn[NL] ) { return 0; }    # 重複手
    brd[x][y] = stn[who]; return 1;              # 打手
}

##--------------------------------------------------------------------
##  終了判定
##--------------------------------------------------------------------

function game_over(who, ct,  k) {
    st = stn[who];
    ##----  横方向の連
    for ( k = 0; k < SZ; k++ ) {
        if ( brd[k][0] == st && brd[k][1] == st && brd[k][2] == st ) {
            return who;
        }
    }
    ##----  縦方向の連
    for ( k = 0; k < SZ; k++ ) {
        if ( brd[0][k] == st && brd[1][k] == st && brd[2][k] == st ) {
            return who;
       }
    }
    ##----  斜方向の連(左上 右下)
    if ( brd[0][0] == st && brd[1][1] == st && brd[2][2] == st ) {
        return who;
    }
    ##----  斜方向の連(右上 左下)
    if ( brd[0][2] == st && brd[1][1] == st && brd[2][0] == st ) {
        return who;
    }
    ##----  引分
    if ( ct == SZ*SZ ) { return EV; }
    ##----  継続
    return NL;
}
