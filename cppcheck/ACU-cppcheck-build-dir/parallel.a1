<?xml version="1.0"?>
<analyzerinfo checksum="1548900054">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3549931283789474431">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="66" column="7"/>
            <symbol>ret</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10299878937327460077">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="94" column="7"/>
            <symbol>ret</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2467020963661729900">
            <location file0="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="120" column="6"/>
            <symbol>ret</symbol>
        </error>
  <FileInfo check="ctu">
<function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="75" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="74" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call><function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="108" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="107" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call>  </FileInfo>
  <FileInfo check="ctu">
<function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="75" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="74" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call><function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="108" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="107" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call>  </FileInfo>
  <FileInfo check="ctu">
<function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="75" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="74" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call><function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="108" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="107" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call>  </FileInfo>
  <FileInfo check="ctu">
<function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="75" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="74" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call><function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="108" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="107" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call>  </FileInfo>
  <FileInfo check="ctu">
<function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="75" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="74" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call><function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="108" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="107" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call>  </FileInfo>
  <FileInfo check="ctu">
<function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="75" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="74" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call><function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="108" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="107" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call>  </FileInfo>
  <FileInfo check="ctu">
<function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="75" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="74" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call><function-call call-id="Z:/ACU/ACU_SXA/workspace/J2STD/PUBLIC/drivererror.h:51:6" call-funcname="driverError" call-argnr="1" file="Z:/ACU/ACU_SXA/workspace/J2STD/SRC/PARALLEL/parallel.c" line="108" col="15" call-argexpr="ret" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="Z:\ACU\ACU_SXA\workspace\J2STD\SRC\PARALLEL\parallel.c" line="107" col="27" info="Assuming that condition '0==ret' is not redundant"/>
</function-call>  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="pioInput" lineNumber="63"/>
    <functiondecl functionName="pioOutput" lineNumber="91"/>
    <functiondecl functionName="pioEmgcyDriveOff" lineNumber="118"/>
    <functiondecl functionName="pioInput" lineNumber="63"/>
    <functiondecl functionName="pioOutput" lineNumber="91"/>
    <functiondecl functionName="pioEmgcyDriveOff" lineNumber="118"/>
    <functiondecl functionName="pioInput" lineNumber="63"/>
    <functiondecl functionName="pioOutput" lineNumber="91"/>
    <functiondecl functionName="pioEmgcyDriveOff" lineNumber="118"/>
    <functiondecl functionName="pioInput" lineNumber="63"/>
    <functiondecl functionName="pioOutput" lineNumber="91"/>
    <functiondecl functionName="pioEmgcyDriveOff" lineNumber="118"/>
    <functiondecl functionName="pioInput" lineNumber="63"/>
    <functiondecl functionName="pioOutput" lineNumber="91"/>
    <functiondecl functionName="pioEmgcyDriveOff" lineNumber="118"/>
    <functiondecl functionName="pioInput" lineNumber="63"/>
    <functiondecl functionName="pioOutput" lineNumber="91"/>
    <functiondecl functionName="pioEmgcyDriveOff" lineNumber="118"/>
    <functiondecl functionName="pioInput" lineNumber="63"/>
    <functiondecl functionName="pioOutput" lineNumber="91"/>
    <functiondecl functionName="pioEmgcyDriveOff" lineNumber="118"/>
    <functioncall functionName="END_INPUT_NUM"/>
    <functioncall functionName="END_OUTPUT_NUM"/>
    <functioncall functionName="INSTRUCTION"/>
    <functioncall functionName="INTERLOCK_CBANK_FAULT"/>
    <functioncall functionName="INTERLOCK_COND_OFF_ANS"/>
    <functioncall functionName="INTERLOCK_DPA_FAULT"/>
    <functioncall functionName="INTERLOCK_DPA_IF_FAULT"/>
    <functioncall functionName="INTERLOCK_MOTOR_OVERHEAT"/>
    <functioncall functionName="LM_DEBUG"/>
    <functioncall functionName="LM_INFO"/>
    <functioncall functionName="LM_SEVERE"/>
    <functioncall functionName="LM_TRACE"/>
    <functioncall functionName="LM_WARNING"/>
    <functioncall functionName="MAX_INPUT_NUM"/>
    <functioncall functionName="MAX_OUTPUT_NUM"/>
    <functioncall functionName="__FUNCTION__"/>
    <functioncall functionName="arg1"/>
    <functioncall functionName="arg2"/>
    <functioncall functionName="break"/>
    <functioncall functionName="compress32_ex"/>
    <functioncall functionName="double"/>
    <functioncall functionName="driverError"/>
    <functioncall functionName="dt_pio_input_null"/>
    <functioncall functionName="dt_pio_output_null"/>
    <functioncall functionName="emgcy_off_bit_null"/>
    <functioncall functionName="emgcy_on_bit_null"/>
    <functioncall functionName="expand32_ex"/>
    <functioncall functionName="for"/>
    <functioncall functionName="func"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="int"/>
    <functioncall functionName="nullFuncImpl"/>
    <functioncall functionName="ret"/>
    <functioncall functionName="signal"/>
    <functioncall functionName="void"/>
    <functioncall functionName="while"/>
    <functioncall functionName="z0263464_rsw0_lower_input"/>
    <functioncall functionName="z0263464_rsw0_upper_output"/>
    <functioncall functionName="z0263464_rsw1_lower_input"/>
    <functioncall functionName="z0263464_rsw1_upper_output"/>
  </FileInfo>
</analyzerinfo>
