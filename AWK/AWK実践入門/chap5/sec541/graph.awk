##====================================================================
##
##--------------------------------------------------------------------
##
##====================================================================


##====================================================================
##  本体処理
##====================================================================

##--------------------------------------------------------------------
##
##--------------------------------------------------------------------

BEGIN {
    ##----  数学定数
    PI = atan2(0, -1)	# または atan2(1, 1)*4
    EX = exp(1)
    ##----  座標軸の設定
    split(option("20.20"), co, ".")  # デフォルトで20×±20の座標軸
    X = co[1]+0
    Y = co[2]
    coordinate()                     # Y軸が不要なら省略
    axis = repeat(" ", Y) "|" repeat(" ", Y)
    ##----  グラフの描画
    for ( x = 0; x <= X; x++ )  {
        po = int(graph(x))
        #po = int(@fun(x))    # 関数名の参照
        if ( po < -Y )
            printf("%3d # %s   \n", x, axis)      # 左オーバーフロー表示
        else  if  ( po > Y )
            printf("%3d   %s # \n", x, axis)      # 右オーバーフロー表示
        else  {
            line = substr(axis, 1, Y+po) "*" substr(axis, Y+po+2)
            printf("%3d   %s   \n", x, line)      # グラフの１行分
        }
    }
}


##====================================================================
##  関数定義
##====================================================================

##--------------------------------------------------------------------
##  Y座標目盛の表示
##--------------------------------------------------------------------

function  coordinate()  {
    qu = int(Y/10)
    re = Y%10
    tm = repeat(qu, re)
    for (i = qu; i > 0; i--)  {
        tm = tm i repeat(i-1, 9)
        tp = tp repeat(qu-i, 9) qu-i+1
    }
    tp = tp repeat(qu-i, re)
    om = substr("987654321", 10-re, re) repeat("0987654321", qu)
    op = repeat("1234567890", qu) substr("123456789", 1, re)

    printf("      %s %s   \n", repeat("-", Y), repeat("+", Y))
    printf("      %s %s   \n", tm, tp)
    printf("      %s0%s   \n", om, op)
}


########  参照関数

# option()    [4.4節]    option.awk
function  option(opt)  {
    if (ARGC > 1 && ARGV[1] ~ /^\+.*$/)  {    # オプション指定のチェック
        opt = substr(ARGV[1], 2)              # 先頭の"+"を取り除く
        delete ARGV[1]                        # 配列を解放する
    }
    return opt
}

# repeat()    [4.2節]    str.awk
function  repeat(str, time,   i, ret)  {
    for  ( i = 1; i <= time; i++ )  ret = str ret
    return ret
}
