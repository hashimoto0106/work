##====================================================================
##  正規ラベル木の構成
##--------------------------------------------------------------------
##
##====================================================================


##====================================================================
##
##====================================================================

##--------------------------------------------------------------------
##
##--------------------------------------------------------------------

BEGIN  {
    switch ( WH ) {
    case "/" :
        PSEP = "/";
        OSEP = "/";
        NLRT = 1;      # 区切文字のみをルートとみなす
        break
    case ":" :
        PSEP = ":";
        OSEP = "";
        NLRT = 0;
        break;
    default :
        PSEP = ":";    # 入力のパスの区切
        OSEP = "";     # 出力のパスの区切
        NLRT = 0;      # 区切文字のみをルートとみなさない
        break;
    }
    PROCINFO["sorted_in"] = "@ind_str_asc"    # 添字の文字列としての昇順
}

##--------------------------------------------------------------------
##
##--------------------------------------------------------------------

/^[_:\/A-Za-z0-9]/  {
    x = check_path($1);
    node_list[x] = 1;
    while ( x != "" ) {
        p = get_parent(x);
        if ( p == "" ) { root_list[x] = 1; break; }
        node_list[p] = 1;
        child_list[p][x] = 1;
        x = p;
    }
}

##--------------------------------------------------------------------
##
##--------------------------------------------------------------------

END {
    ##----
    if ( NLRT ) {
        printf OSEP " ";
        for ( x in root_list ) { printf " " OSEP x; }
        print "";
    }
    ##----
    for ( x in node_list ) {
        if ( x == "" ) { continue; }
        printf OSEP x  " ";
        if ( isarray(child_list[x]) == 0 ) { print ""; continue; }
        for ( c in child_list[x] ) { printf " " OSEP c; }
        print "";
    }
}


##====================================================================
##  関数定義
##====================================================================

##--------------------------------------------------------------------
##
##--------------------------------------------------------------------

function check_path(str,    len) {
    len = length(str);
    if ( substr(str, len, 1) == PSEP ) {    # 末尾の区切文字があるとき
        str = substr(str, 1, len-1);
    }
    if ( substr(str, 1, 1) == PSEP ) {      # 先頭の区切文字があるとき
        str = substr(str, 2);
    }
    return str;
}

##--------------------------------------------------------------------
##
##--------------------------------------------------------------------

function get_parent(nd) {
    match(nd, "^.*" PSEP);
    if ( RLENGTH < 0 ) { return ""; }
    return substr(nd, RSTART, RLENGTH-1);
}
