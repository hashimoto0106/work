<?xml version="1.0"?>
<analyzerinfo checksum="312458518">
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%x in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." verbose="%x in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." cwe="686" hash="10154198516061139352">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1489" column="4"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." cwe="686" hash="17532879967000892957">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1690" column="2"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." cwe="686" hash="3831330039982221260">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1691" column="2"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." cwe="686" hash="15485847372476797576">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1692" column="2"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." cwe="686" hash="2663732923127815817">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1693" column="2"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." cwe="686" hash="6720133066805534725">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1714" column="2"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." cwe="686" hash="4646306896855477282">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1715" column="2"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;unsigned long&apos;." cwe="686" hash="17896080881270767543">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1716" column="2"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;memAddr==(unsigned long*)0&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;memAddr==(unsigned long*)0&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" hash="48512454432865087">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1469" column="17" info="Null pointer addition"/>
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1471" column="13" info="condition &apos;memAddr==(unsigned long*)0&apos;"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;memAddr==(unsigned long*)0&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;memAddr==(unsigned long*)0&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" hash="2023410076075788560">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1521" column="17" info="Null pointer addition"/>
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1522" column="13" info="condition &apos;memAddr==(unsigned long*)0&apos;"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3315956407290096658">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1745" column="8"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;func&apos; can be reduced." verbose="The scope of the variable &apos;func&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8355766215670329192">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1746" column="12"/>
            <symbol>func</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg1&apos; can be reduced." verbose="The scope of the variable &apos;arg1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13177883394272457563">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1747" column="17"/>
            <symbol>arg1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg2&apos; can be reduced." verbose="The scope of the variable &apos;arg2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8760939301935251052">
            <location file0="..\workspace\DRIVER\SRC\pci_ilc.c" file="..\workspace\DRIVER\SRC\pci_ilc.c" line="1748" column="17"/>
            <symbol>arg2</symbol>
        </error>
  <FileInfo check="ctu">
<function-call call-id="../workspace/DRIVER/PUBLIC/pci_drv_ilc.h:148:5" call-funcname="FilcGetDipSwitch" call-argnr="2" file="../workspace/DRIVER/SRC/pci_ilc.c" line="200" col="18" call-argexpr="&dipsw" call-argvaluetype="7" call-argvalue="4"/><function-call call-id="../workspace/DRIVER/PUBLIC/pci_drv_ilc.h:66:5" call-funcname="FilcGetInterlock" call-argnr="2" file="../workspace/DRIVER/SRC/pci_ilc.c" line="422" col="24" call-argexpr="&interlock" call-argvaluetype="7" call-argvalue="0"/><function-call call-id="../workspace/DRIVER/PUBLIC/pci_drv_ilc.h:66:5" call-funcname="FilcGetInterlock" call-argnr="2" file="../workspace/DRIVER/SRC/pci_ilc.c" line="422" col="24" call-argexpr="interlock" call-argvaluetype="4" call-argvalue="0"/><function-call call-id="../workspace/DRIVER/SRC/pci_ilc.h:212:6" call-funcname="pci_ilcInputLogic" call-argnr="1" file="../workspace/DRIVER/SRC/pci_ilc.c" line="611" col="19" call-argexpr="nIlcNum" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="..\workspace\DRIVER\SRC\pci_ilc.c" line="602" col="15" info="Assuming that condition 'nIlcNum<0' is not redundant"/>
</function-call><function-call call-id="../workspace/DRIVER/SRC/pci_ilc.h:212:6" call-funcname="pci_ilcInputLogic" call-argnr="1" file="../workspace/DRIVER/SRC/pci_ilc.c" line="646" col="19" call-argexpr="nIlcNum" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="..\workspace\DRIVER\SRC\pci_ilc.c" line="637" col="15" info="Assuming that condition 'nIlcNum<0' is not redundant"/>
</function-call><function-call call-id="../workspace/DRIVER/SRC/pci_ilc.h:214:6" call-funcname="pci_ilcDelChatt" call-argnr="1" file="../workspace/DRIVER/SRC/pci_ilc.c" line="748" col="17" call-argexpr="nIlcNum" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="..\workspace\DRIVER\SRC\pci_ilc.c" line="736" col="15" info="Assuming that condition 'nIlcNum<0' is not redundant"/>
</function-call><function-call call-id="../workspace/DRIVER/SRC/pci_ilc.h:212:6" call-funcname="pci_ilcInputLogic" call-argnr="1" file="../workspace/DRIVER/SRC/pci_ilc.c" line="751" col="19" call-argexpr="nIlcNum" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="..\workspace\DRIVER\SRC\pci_ilc.c" line="736" col="15" info="Assuming that condition 'nIlcNum<0' is not redundant"/>
</function-call><function-call call-id="../workspace/DRIVER/SRC/pci_ilc.h:216:6" call-funcname="pci_ilcOutputLogic" call-argnr="1" file="../workspace/DRIVER/SRC/pci_ilc.c" line="839" col="20" call-argexpr="nIlcNum" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path file="..\workspace\DRIVER\SRC\pci_ilc.c" line="828" col="15" info="Assuming that condition 'nIlcNum<0' is not redundant"/>
</function-call><function-call call-id="../workspace/DRIVER/PUBLIC/pci_drv_ilc.h:210:16" call-funcname="FilcGetAddress" call-argnr="3" file="../workspace/DRIVER/SRC/pci_ilc.c" line="1468" col="26" call-argexpr="&blockSize" call-argvaluetype="7" call-argvalue="4"/><function-call call-id="../workspace/DRIVER/PUBLIC/pci_drv_ilc.h:210:16" call-funcname="FilcGetAddress" call-argnr="3" file="../workspace/DRIVER/SRC/pci_ilc.c" line="1468" col="26" call-argexpr="blockSize" call-argvaluetype="4" call-argvalue="0"/><function-call call-id="../workspace/DRIVER/PUBLIC/pci_drv_ilc.h:210:16" call-funcname="FilcGetAddress" call-argnr="3" file="../workspace/DRIVER/SRC/pci_ilc.c" line="1520" col="26" call-argexpr="&blockSize" call-argvaluetype="7" call-argvalue="4"/><function-call call-id="../workspace/DRIVER/PUBLIC/pci_drv_ilc.h:210:16" call-funcname="FilcGetAddress" call-argnr="3" file="../workspace/DRIVER/SRC/pci_ilc.c" line="1520" col="26" call-argexpr="blockSize" call-argvaluetype="4" call-argvalue="0"/>  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="../workspace/DRIVER/PUBLIC/pci_drv_ilc.h:210:16" my-argnr="3" my-argname="blockSize" file="../workspace/DRIVER/SRC/pci_ilc.c" line="1390" col="3" value="0"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="FilcInit" lineNumber="64"/>
    <functiondecl functionName="FilcOpen" lineNumber="90"/>
    <functiondecl functionName="FilcClose" lineNumber="228"/>
    <functiondecl functionName="FilcSetCycle" lineNumber="270"/>
    <functiondecl functionName="FilcSetInterlock" lineNumber="310"/>
    <functiondecl functionName="FilcGetInterlock" lineNumber="376"/>
    <functiondecl functionName="FilcPrintInterlock" lineNumber="416"/>
    <functiondecl functionName="FilcSetIrqConfig" lineNumber="453"/>
    <functiondecl functionName="FilcIrqEnable" lineNumber="498"/>
    <functiondecl functionName="FilcIrqDisable" lineNumber="546"/>
    <functiondecl functionName="FilcSetInputLogic" lineNumber="596"/>
    <functiondecl functionName="FilcSetInputTest" lineNumber="631"/>
    <functiondecl functionName="FilcSetOutputLogic" lineNumber="665"/>
    <functiondecl functionName="FilcSetOutputTest" lineNumber="696"/>
    <functiondecl functionName="FilcInput" lineNumber="728"/>
    <functiondecl functionName="FilcGetInputData" lineNumber="773"/>
    <functiondecl functionName="FilcOutput" lineNumber="818"/>
    <functiondecl functionName="FilcOutputMonitor" lineNumber="871"/>
    <functiondecl functionName="FilcGetDipSwitch" lineNumber="906"/>
    <functiondecl functionName="FilcSetLED" lineNumber="941"/>
    <functiondecl functionName="FilcWdtReset" lineNumber="975"/>
    <functiondecl functionName="FilcGetWdtFault" lineNumber="1009"/>
    <functiondecl functionName="FilcGetAcFail" lineNumber="1049"/>
    <functiondecl functionName="FilcGetP5VFail" lineNumber="1089"/>
    <functiondecl functionName="FilcGetP12VFail" lineNumber="1129"/>
    <functiondecl functionName="FilcGetM12VFail" lineNumber="1169"/>
    <functiondecl functionName="FilcGetSeu" lineNumber="1209"/>
    <functiondecl functionName="FilcGetRearIdFault" lineNumber="1249"/>
    <functiondecl functionName="FilcGetClockError" lineNumber="1289"/>
    <functiondecl functionName="FilcHeartBeat" lineNumber="1329"/>
    <functiondecl functionName="FilcGetAddress" lineNumber="1385"/>
    <functiondecl functionName="FilcGetHwVersion" lineNumber="1423"/>
    <functiondecl functionName="FilcRegRead" lineNumber="1461"/>
    <functiondecl functionName="FilcRegWrite" lineNumber="1512"/>
    <functiondecl functionName="FilcGetInputLogic" lineNumber="1560"/>
    <functiondecl functionName="FilcGetInputTest" lineNumber="1593"/>
    <functiondecl functionName="FilcGetOutputLogic" lineNumber="1626"/>
    <functiondecl functionName="FilcGetOutputTest" lineNumber="1659"/>
    <functiondecl functionName="FilcDispIn" lineNumber="1680"/>
    <functiondecl functionName="FilcDispOut" lineNumber="1704"/>
    <functiondecl functionName="pci_ilcPciInt" lineNumber="1739"/>
    <functiondecl functionName="pci_ilcInputLogic" lineNumber="1803"/>
    <functiondecl functionName="pci_ilcDelChatt" lineNumber="1829"/>
    <functiondecl functionName="pci_ilcOutputLogic" lineNumber="1891"/>
    <functiondecl functionName="pci_ilcBitExpand" lineNumber="1917"/>
    <functiondecl functionName="pci_ilcDeviceSearch" lineNumber="1952"/>
    <functiondecl functionName="pci_ilcDeviceRegist" lineNumber="1976"/>
    <functiondecl functionName="pci_ilcDeviceDelete" lineNumber="2008"/>
    <functiondecl functionName="pci_ilcCardInit" lineNumber="2039"/>
    <functiondecl functionName="pci_ilcPciIntCheck" lineNumber="2112"/>
    <functiondecl functionName="pci_ilcInputInit" lineNumber="2156"/>
    <functioncall functionName="FilcGetAddress"/>
    <functioncall functionName="FilcGetDipSwitch"/>
    <functioncall functionName="FilcGetInterlock"/>
    <functioncall functionName="FilcIrqDisable"/>
    <functioncall functionName="FilcPrintInterlock"/>
    <functioncall functionName="PIC_IRQ_TO_IVEC"/>
    <functioncall functionName="addr"/>
    <functioncall functionName="and"/>
    <functioncall functionName="arg1"/>
    <functioncall functionName="arg2"/>
    <functioncall functionName="argment1"/>
    <functioncall functionName="argment2"/>
    <functioncall functionName="baseAddr0"/>
    <functioncall functionName="bit_alarm"/>
    <functioncall functionName="blockSize"/>
    <functioncall functionName="board_num"/>
    <functioncall functionName="break"/>
    <functioncall functionName="busNo"/>
    <functioncall functionName="chatter"/>
    <functioncall functionName="com_stat"/>
    <functioncall functionName="cycle"/>
    <functioncall functionName="data"/>
    <functioncall functionName="devNo"/>
    <functioncall functionName="deviceID"/>
    <functioncall functionName="dip_sw"/>
    <functioncall functionName="dipsw"/>
    <functioncall functionName="dist"/>
    <functioncall functionName="flash_write"/>
    <functioncall functionName="for"/>
    <functioncall functionName="func"/>
    <functioncall functionName="funcNo"/>
    <functioncall functionName="handler"/>
    <functioncall functionName="heart_beat"/>
    <functioncall functionName="hwVersion"/>
    <functioncall functionName="hw_version"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="in_intlock_logic"/>
    <functioncall functionName="in_intlock_mask"/>
    <functioncall functionName="index"/>
    <functioncall functionName="input"/>
    <functioncall functionName="inputIntlkLogic"/>
    <functioncall functionName="inputIntlkMask"/>
    <functioncall functionName="int"/>
    <functioncall functionName="intLine"/>
    <functioncall functionName="int_event"/>
    <functioncall functionName="interlock"/>
    <functioncall functionName="intlkLogicSel"/>
    <functioncall functionName="intlock_logic_sel"/>
    <functioncall functionName="intrEvent"/>
    <functioncall functionName="iret"/>
    <functioncall functionName="led"/>
    <functioncall functionName="memAddr0"/>
    <functioncall functionName="nAndVal"/>
    <functioncall functionName="nBlock"/>
    <functioncall functionName="nBoard"/>
    <functioncall functionName="nBoardDef"/>
    <functioncall functionName="nBusNum"/>
    <functioncall functionName="nCatt"/>
    <functioncall functionName="nChatVal"/>
    <functioncall functionName="nCounter"/>
    <functioncall functionName="nDeviceNum"/>
    <functioncall functionName="nIlcNum"/>
    <functioncall functionName="nInput"/>
    <functioncall functionName="nIntrLine"/>
    <functioncall functionName="nLogicVal"/>
    <functioncall functionName="nMemBlkAddr0"/>
    <functioncall functionName="nNum"/>
    <functioncall functionName="nOrVal"/>
    <functioncall functionName="nOutput"/>
    <functioncall functionName="nPort"/>
    <functioncall functionName="nfuncNum"/>
    <functioncall functionName="offset"/>
    <functioncall functionName="or"/>
    <functioncall functionName="outBool"/>
    <functioncall functionName="outPair"/>
    <functioncall functionName="out_intlock_logic"/>
    <functioncall functionName="out_intlock_mask"/>
    <functioncall functionName="outputIntlkLogic"/>
    <functioncall functionName="outputIntlkMask"/>
    <functioncall functionName="output_mon"/>
    <functioncall functionName="pciConfigInLong"/>
    <functioncall functionName="pciConfigOutLong"/>
    <functioncall functionName="pciFindDevice"/>
    <functioncall functionName="pciIntConnect"/>
    <functioncall functionName="pciIntDisconnect2"/>
    <functioncall functionName="pci_comGetIoBlockAddr"/>
    <functioncall functionName="pci_comGetMemBlockAddr"/>
    <functioncall functionName="pci_comPCIendianChg"/>
    <functioncall functionName="pci_ilcBitExpand"/>
    <functioncall functionName="pci_ilcCardInit"/>
    <functioncall functionName="pci_ilcDelChatt"/>
    <functioncall functionName="pci_ilcDeviceDelete"/>
    <functioncall functionName="pci_ilcDeviceRegist"/>
    <functioncall functionName="pci_ilcDeviceSearch"/>
    <functioncall functionName="pci_ilcInputInit"/>
    <functioncall functionName="pci_ilcInputLogic"/>
    <functioncall functionName="pci_ilcOutputLogic"/>
    <functioncall functionName="pci_ilcPciInt"/>
    <functioncall functionName="pci_ilcPciIntCheck"/>
    <functioncall functionName="post_alarm"/>
    <functioncall functionName="printf"/>
    <functioncall functionName="reservePortSel"/>
    <functioncall functionName="reserve_port_sel"/>
    <functioncall functionName="ret"/>
    <functioncall functionName="return"/>
    <functioncall functionName="short"/>
    <functioncall functionName="val"/>
    <functioncall functionName="venderID"/>
    <functioncall functionName="void"/>
    <functioncall functionName="wdtTimeout"/>
    <functioncall functionName="wdt_cnt"/>
    <functioncall functionName="wdt_val"/>
    <functioncall functionName="xor"/>
  </FileInfo>
</analyzerinfo>
